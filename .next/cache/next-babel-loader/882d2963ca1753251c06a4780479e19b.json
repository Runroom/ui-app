{"ast":null,"code":"import { css } from 'styled-components';\nimport { pixelate } from './rhythm';\nconst breakpoints = {\n  desktop: 992,\n  desktopLarge: 1024,\n  maxWidth: 1200,\n  phone: 480,\n  reader: 550,\n  tablet: 768\n};\n\nfunction getSizeFromBreakpoint(breakpointValue, max = false) {\n  let mq;\n\n  if (breakpoints[breakpointValue]) {\n    mq = max ? breakpoints[breakpointValue] - 1 : breakpoints[breakpointValue]; // tslint:disable-next-line:radix\n  } else if (parseInt(breakpointValue)) {\n    mq = max ? breakpointValue - 1 : breakpointValue;\n  } else {\n    // tslint:disable-next-line:no-console\n    console.error('No valid breakpoint or size specified for media.');\n  }\n\n  return mq ? pixelate(mq) : '0';\n}\n\nexport function generateMedia() {\n  const max = breakpoint => (...args) => css([\"@media (max-width:\", \"){\", \";}\"], getSizeFromBreakpoint(breakpoint, true), css.call(null, ...args));\n\n  const min = breakpoint => (...args) => css([\"@media (min-width:\", \"){\", \";}\"], getSizeFromBreakpoint(breakpoint), css.call(null, ...args));\n\n  const between = (firstBreakpoint, secondBreakpoint) => (...args) => css([\"@media (min-width:\", \") and (max-width:\", \"){\", \";}\"], getSizeFromBreakpoint(firstBreakpoint), getSizeFromBreakpoint(secondBreakpoint, true), css.call(null, ...args));\n\n  return {\n    between,\n    max,\n    min\n  };\n}\nconst media = generateMedia();\nexport { media, breakpoints };","map":null,"metadata":{},"sourceType":"module"}