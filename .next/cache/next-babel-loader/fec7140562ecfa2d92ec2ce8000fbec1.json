{"ast":null,"code":"import { css } from 'styled-components';\nimport { pixelate } from './rhythm';\nvar breakpoints = {\n  desktop: 992,\n  desktopLarge: 1024,\n  maxWidth: 1200,\n  phone: 480,\n  reader: 550,\n  tablet: 768\n};\n\nfunction getSizeFromBreakpoint(breakpointValue) {\n  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var mq;\n\n  if (breakpoints[breakpointValue]) {\n    mq = max ? breakpoints[breakpointValue] - 1 : breakpoints[breakpointValue]; // tslint:disable-next-line:radix\n  } else if (parseInt(breakpointValue)) {\n    mq = max ? breakpointValue - 1 : breakpointValue;\n  } else {\n    // tslint:disable-next-line:no-console\n    console.error('No valid breakpoint or size specified for media.');\n  }\n\n  return mq ? pixelate(mq) : '0';\n}\n\nexport function generateMedia() {\n  var max = function max(breakpoint) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return css([\"@media (max-width:\", \"){\", \";}\"], getSizeFromBreakpoint(breakpoint, true), css.call.apply(css, [null].concat(args)));\n    };\n  };\n\n  var min = function min(breakpoint) {\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return css([\"@media (min-width:\", \"){\", \";}\"], getSizeFromBreakpoint(breakpoint), css.call.apply(css, [null].concat(args)));\n    };\n  };\n\n  var between = function between(firstBreakpoint, secondBreakpoint) {\n    return function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return css([\"@media (min-width:\", \") and (max-width:\", \"){\", \";}\"], getSizeFromBreakpoint(firstBreakpoint), getSizeFromBreakpoint(secondBreakpoint, true), css.call.apply(css, [null].concat(args)));\n    };\n  };\n\n  return {\n    between: between,\n    max: max,\n    min: min\n  };\n}\nvar media = generateMedia();\nexport { media, breakpoints };","map":{"version":3,"sources":["/Users/Jose/Sites/runroom-ui-app/styles/media-queries.js"],"names":["css","pixelate","breakpoints","desktop","desktopLarge","maxWidth","phone","reader","tablet","getSizeFromBreakpoint","breakpointValue","max","mq","parseInt","console","error","generateMedia","breakpoint","args","call","min","between","firstBreakpoint","secondBreakpoint","media"],"mappings":"AAAA,SAASA,GAAT,QAAoB,mBAApB;AAEA,SAASC,QAAT,QAAyB,UAAzB;AAEA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,OAAO,EAAE,GADS;AAElBC,EAAAA,YAAY,EAAE,IAFI;AAGlBC,EAAAA,QAAQ,EAAE,IAHQ;AAIlBC,EAAAA,KAAK,EAAE,GAJW;AAKlBC,EAAAA,MAAM,EAAE,GALU;AAMlBC,EAAAA,MAAM,EAAE;AANU,CAApB;;AASA,SAASC,qBAAT,CAA+BC,eAA/B,EAA6D;AAAA,MAAbC,GAAa,uEAAP,KAAO;AAC3D,MAAIC,EAAJ;;AACA,MAAIV,WAAW,CAACQ,eAAD,CAAf,EAAkC;AAChCE,IAAAA,EAAE,GAAGD,GAAG,GAAGT,WAAW,CAACQ,eAAD,CAAX,GAA+B,CAAlC,GAAsCR,WAAW,CAACQ,eAAD,CAAzD,CADgC,CAEhC;AACD,GAHD,MAGO,IAAIG,QAAQ,CAACH,eAAD,CAAZ,EAA+B;AACpCE,IAAAA,EAAE,GAAGD,GAAG,GAAGD,eAAe,GAAG,CAArB,GAAyBA,eAAjC;AACD,GAFM,MAEA;AACL;AACAI,IAAAA,OAAO,CAACC,KAAR,CAAc,kDAAd;AACD;;AACD,SAAOH,EAAE,GAAGX,QAAQ,CAACW,EAAD,CAAX,GAAkB,GAA3B;AACD;;AAED,OAAO,SAASI,aAAT,GAAyB;AAC9B,MAAML,GAAG,GAAG,SAANA,GAAM,CAACM,UAAD;AAAA,WAAgB;AAAA,wCAAIC,IAAJ;AAAIA,QAAAA,IAAJ;AAAA;;AAAA,aAAalB,GAAb,qCACLS,qBAAqB,CAACQ,UAAD,EAAa,IAAb,CADhB,EAEtBjB,GAAG,CAACmB,IAAJ,OAAAnB,GAAG,GAAM,IAAN,SAAekB,IAAf,EAFmB;AAAA,KAAhB;AAAA,GAAZ;;AAMA,MAAME,GAAG,GAAG,SAANA,GAAM,CAACH,UAAD;AAAA,WAAgB;AAAA,yCAAIC,IAAJ;AAAIA,QAAAA,IAAJ;AAAA;;AAAA,aAAalB,GAAb,qCACLS,qBAAqB,CAACQ,UAAD,CADhB,EAEtBjB,GAAG,CAACmB,IAAJ,OAAAnB,GAAG,GAAM,IAAN,SAAekB,IAAf,EAFmB;AAAA,KAAhB;AAAA,GAAZ;;AAMA,MAAMG,OAAO,GAAG,SAAVA,OAAU,CAACC,eAAD,EAAkBC,gBAAlB;AAAA,WAAuC;AAAA,yCAClDL,IADkD;AAClDA,QAAAA,IADkD;AAAA;;AAAA,aAElDlB,GAFkD,0DAGhCS,qBAAqB,CACtCa,eADsC,CAHW,EAK7Bb,qBAAqB,CAACc,gBAAD,EAAmB,IAAnB,CALQ,EAMjDvB,GAAG,CAACmB,IAAJ,OAAAnB,GAAG,GAAM,IAAN,SAAekB,IAAf,EAN8C;AAAA,KAAvC;AAAA,GAAhB;;AAUA,SAAO;AACLG,IAAAA,OAAO,EAAPA,OADK;AAELV,IAAAA,GAAG,EAAHA,GAFK;AAGLS,IAAAA,GAAG,EAAHA;AAHK,GAAP;AAKD;AAED,IAAMI,KAAK,GAAGR,aAAa,EAA3B;AAEA,SAASQ,KAAT,EAAgBtB,WAAhB","sourcesContent":["import { css } from 'styled-components';\n\nimport { pixelate } from './rhythm';\n\nconst breakpoints = {\n  desktop: 992,\n  desktopLarge: 1024,\n  maxWidth: 1200,\n  phone: 480,\n  reader: 550,\n  tablet: 768\n};\n\nfunction getSizeFromBreakpoint(breakpointValue, max = false) {\n  let mq;\n  if (breakpoints[breakpointValue]) {\n    mq = max ? breakpoints[breakpointValue] - 1 : breakpoints[breakpointValue];\n    // tslint:disable-next-line:radix\n  } else if (parseInt(breakpointValue)) {\n    mq = max ? breakpointValue - 1 : breakpointValue;\n  } else {\n    // tslint:disable-next-line:no-console\n    console.error('No valid breakpoint or size specified for media.');\n  }\n  return mq ? pixelate(mq) : '0';\n}\n\nexport function generateMedia() {\n  const max = (breakpoint) => (...args) => css`\n    @media (max-width: ${getSizeFromBreakpoint(breakpoint, true)}) {\n      ${css.call(null, ...args)};\n    }\n  `;\n\n  const min = (breakpoint) => (...args) => css`\n    @media (min-width: ${getSizeFromBreakpoint(breakpoint)}) {\n      ${css.call(null, ...args)};\n    }\n  `;\n\n  const between = (firstBreakpoint, secondBreakpoint) => (\n    ...args\n  ) => css`\n    @media (min-width: ${getSizeFromBreakpoint(\n        firstBreakpoint\n      )}) and (max-width: ${getSizeFromBreakpoint(secondBreakpoint, true)}) {\n      ${css.call(null, ...args)};\n    }\n  `;\n\n  return {\n    between,\n    max,\n    min\n  };\n}\n\nconst media = generateMedia();\n\nexport { media, breakpoints };\n"]},"metadata":{},"sourceType":"module"}