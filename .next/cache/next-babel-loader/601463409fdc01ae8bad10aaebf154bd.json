{"ast":null,"code":"import { css } from 'styled-components';\nimport { space } from './rhythm';\n\nconst hover = (...args) => css([\"&:hover{html.non-touch &:hover{\", \";}}\"], css.call(null, ...args));\n\nconst hexToRgb = hex => {\n  if (hex[0] === '#') {\n    hex = hex.substr(1);\n  }\n\n  if (hex.length === 3) {\n    const hr = hex[0];\n    const hg = hex[1];\n    const hb = hex[2];\n    return hexToRgb(`${hr}${hr}${hg}${hg}${hb}${hb}`);\n  }\n\n  const [r, g, b] = [0, 2, 4].map(offset => hex.substring(offset, offset + 2)).map(hexCh => parseInt(hexCh, 16));\n  return {\n    r,\n    g,\n    b\n  };\n};\n\nconst rgbToHex = (r, g, b) => {\n  return [r, g, b].map(decCh => Math.max(0, Math.min(255, decCh)).toString(16)).map(hexCh => hexCh.length === 1 ? `0${hexCh}` : hexCh).join('');\n};\n\nconst getRatio = (originalWidth, originalHeight, width = 0, height = 0) => {\n  let finalHeight;\n  let finalWidth;\n\n  if (width > 0) {\n    finalHeight = Math.ceil(width / originalWidth * originalHeight) + 'px';\n    finalWidth = `${width}px`;\n  } else {\n    finalHeight = `${height}px`;\n    finalWidth = Math.ceil(height / originalHeight * originalWidth) + 'px';\n  }\n\n  return `\n    height: ${finalHeight};\n    width: ${finalWidth};\n  `;\n};\n\nconst columns = (number, spaces = 1) => `\n  width: calc((100% - ${space(spaces * (number - 1))}) / ${number});\n\n  &:nth-child(n) { margin-right: ${space(spaces)}; }\n  &:nth-child(${number}n) { margin-right: 0; }\n`;\n\nexport { columns, getRatio, hexToRgb, hover, rgbToHex };","map":null,"metadata":{},"sourceType":"module"}