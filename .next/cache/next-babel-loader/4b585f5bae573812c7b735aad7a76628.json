{"ast":null,"code":"import { css } from 'styled-components';\nimport { space } from './rhythm';\n\nconst hover = (...args) => css([\"&:hover{html.non-touch &:hover{\", \";}}\"], css.call(null, ...args));\n\nconst hexToRgb = hex => {\n  if (hex[0] === '#') {\n    hex = hex.substr(1);\n  }\n\n  if (hex.length === 3) {\n    const hr = hex[0];\n    const hg = hex[1];\n    const hb = hex[2];\n    return hexToRgb(`${hr}${hr}${hg}${hg}${hb}${hb}`);\n  }\n\n  const [r, g, b] = [0, 2, 4].map(offset => hex.substring(offset, offset + 2)).map(hexCh => parseInt(hexCh, 16));\n  return {\n    r,\n    g,\n    b\n  };\n};\n\nconst rgbToHex = (r, g, b) => {\n  return [r, g, b].map(decCh => Math.max(0, Math.min(255, decCh)).toString(16)).map(hexCh => hexCh.length === 1 ? `0${hexCh}` : hexCh).join('');\n};\n\nconst getRatio = (originalWidth, originalHeight, width = 0, height = 0) => {\n  let finalHeight;\n  let finalWidth;\n\n  if (width > 0) {\n    finalHeight = Math.ceil(width / originalWidth * originalHeight) + 'px';\n    finalWidth = `${width}px`;\n  } else {\n    finalHeight = `${height}px`;\n    finalWidth = Math.ceil(height / originalHeight * originalWidth) + 'px';\n  }\n\n  return `\n    height: ${finalHeight};\n    width: ${finalWidth};\n  `;\n};\n\nconst columns = (number, spaces = 1) => `\n  width: calc((100% - ${space(spaces * (number - 1))}) / ${number});\n\n  &:nth-child(n) { margin-right: ${space(spaces)}; }\n  &:nth-child(${number}n) { margin-right: 0; }\n`;\n\nexport { columns, getRatio, hexToRgb, hover, rgbToHex };","map":{"version":3,"sources":["/Users/Jose/Sites/runroom-ui-app/styles/helpers.js"],"names":["css","space","hover","args","call","hexToRgb","hex","substr","length","hr","hg","hb","r","g","b","map","offset","substring","hexCh","parseInt","rgbToHex","decCh","Math","max","min","toString","join","getRatio","originalWidth","originalHeight","width","height","finalHeight","finalWidth","ceil","columns","number","spaces"],"mappings":"AAAA,SAASA,GAAT,QAAoB,mBAApB;AAEA,SAASC,KAAT,QAAsB,UAAtB;;AAEA,MAAMC,KAAK,GAAG,CAAC,GAAGC,IAAJ,KAAaH,GAAb,6CAGNA,GAAG,CAACI,IAAJ,CAAS,IAAT,EAAe,GAAGD,IAAlB,CAHM,CAAd;;AAQA,MAAME,QAAQ,GAAGC,GAAG,IAAI;AACtB,MAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClBA,IAAAA,GAAG,GAAGA,GAAG,CAACC,MAAJ,CAAW,CAAX,CAAN;AACD;;AACD,MAAID,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB;AACpB,UAAMC,EAAE,GAAGH,GAAG,CAAC,CAAD,CAAd;AACA,UAAMI,EAAE,GAAGJ,GAAG,CAAC,CAAD,CAAd;AACA,UAAMK,EAAE,GAAGL,GAAG,CAAC,CAAD,CAAd;AAEA,WAAOD,QAAQ,CAAE,GAAEI,EAAG,GAAEA,EAAG,GAAEC,EAAG,GAAEA,EAAG,GAAEC,EAAG,GAAEA,EAAG,EAAhC,CAAf;AACD;;AAED,QAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EACfC,GADe,CACXC,MAAM,IAAIV,GAAG,CAACW,SAAJ,CAAcD,MAAd,EAAsBA,MAAM,GAAG,CAA/B,CADC,EAEfD,GAFe,CAEXG,KAAK,IAAIC,QAAQ,CAACD,KAAD,EAAQ,EAAR,CAFN,CAAlB;AAIA,SAAO;AAAEN,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQC,IAAAA;AAAR,GAAP;AACD,CAjBD;;AAmBA,MAAMM,QAAQ,GAAG,CAACR,CAAD,EAAIC,CAAJ,EAAOC,CAAP,KAAa;AAC5B,SAAO,CAACF,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EACJC,GADI,CACAM,KAAK,IAAIC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAAS,GAAT,EAAcH,KAAd,CAAZ,EAAkCI,QAAlC,CAA2C,EAA3C,CADT,EAEJV,GAFI,CAEAG,KAAK,IAAKA,KAAK,CAACV,MAAN,KAAiB,CAAjB,GAAsB,IAAGU,KAAM,EAA/B,GAAmCA,KAF7C,EAGJQ,IAHI,CAGC,EAHD,CAAP;AAID,CALD;;AAOA,MAAMC,QAAQ,GAAG,CACfC,aADe,EAEfC,cAFe,EAGfC,KAAK,GAAG,CAHO,EAIfC,MAAM,GAAG,CAJM,KAKZ;AACH,MAAIC,WAAJ;AACA,MAAIC,UAAJ;;AAEA,MAAIH,KAAK,GAAG,CAAZ,EAAe;AACbE,IAAAA,WAAW,GAAGV,IAAI,CAACY,IAAL,CAAWJ,KAAK,GAAGF,aAAT,GAA0BC,cAApC,IAAsD,IAApE;AACAI,IAAAA,UAAU,GAAI,GAAEH,KAAM,IAAtB;AACD,GAHD,MAGO;AACLE,IAAAA,WAAW,GAAI,GAAED,MAAO,IAAxB;AACAE,IAAAA,UAAU,GAAGX,IAAI,CAACY,IAAL,CAAWH,MAAM,GAAGF,cAAV,GAA4BD,aAAtC,IAAuD,IAApE;AACD;;AACD,SAAQ;cACII,WAAY;aACbC,UAAW;GAFtB;AAID,CApBD;;AAsBA,MAAME,OAAO,GAAG,CAACC,MAAD,EAASC,MAAM,GAAG,CAAlB,KAAyB;wBACjBpC,KAAK,CAACoC,MAAM,IAAID,MAAM,GAAG,CAAb,CAAP,CAAwB,OAAMA,MAAO;;mCAE/BnC,KAAK,CAACoC,MAAD,CAAS;gBACjCD,MAAO;CAJvB;;AAOA,SAASD,OAAT,EAAkBR,QAAlB,EAA4BtB,QAA5B,EAAsCH,KAAtC,EAA6CkB,QAA7C","sourcesContent":["import { css } from 'styled-components';\n\nimport { space } from './rhythm';\n\nconst hover = (...args) => css`\n  &:hover {\n    html.non-touch &:hover {\n      ${css.call(null, ...args)};\n    }\n  }\n`;\n\nconst hexToRgb = hex => {\n  if (hex[0] === '#') {\n    hex = hex.substr(1);\n  }\n  if (hex.length === 3) {\n    const hr = hex[0];\n    const hg = hex[1];\n    const hb = hex[2];\n\n    return hexToRgb(`${hr}${hr}${hg}${hg}${hb}${hb}`);\n  }\n\n  const [r, g, b] = [0, 2, 4]\n    .map(offset => hex.substring(offset, offset + 2))\n    .map(hexCh => parseInt(hexCh, 16));\n\n  return { r, g, b };\n};\n\nconst rgbToHex = (r, g, b) => {\n  return [r, g, b]\n    .map(decCh => Math.max(0, Math.min(255, decCh)).toString(16))\n    .map(hexCh => (hexCh.length === 1 ? `0${hexCh}` : hexCh))\n    .join('');\n};\n\nconst getRatio = (\n  originalWidth,\n  originalHeight,\n  width = 0,\n  height = 0\n) => {\n  let finalHeight;\n  let finalWidth;\n\n  if (width > 0) {\n    finalHeight = Math.ceil((width / originalWidth) * originalHeight) + 'px';\n    finalWidth = `${width}px`;\n  } else {\n    finalHeight = `${height}px`;\n    finalWidth = Math.ceil((height / originalHeight) * originalWidth) + 'px';\n  }\n  return `\n    height: ${finalHeight};\n    width: ${finalWidth};\n  `;\n};\n\nconst columns = (number, spaces = 1) => `\n  width: calc((100% - ${space(spaces * (number - 1))}) / ${number});\n\n  &:nth-child(n) { margin-right: ${space(spaces)}; }\n  &:nth-child(${number}n) { margin-right: 0; }\n`;\n\nexport { columns, getRatio, hexToRgb, hover, rgbToHex };\n"]},"metadata":{},"sourceType":"module"}