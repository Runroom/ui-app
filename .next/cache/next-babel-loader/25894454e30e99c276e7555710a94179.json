{"ast":null,"code":"import { css } from 'styled-components';\nimport { pixelate } from './rhythm';\nconst breakpoints = {\n  desktop: 992,\n  desktopLarge: 1024,\n  maxWidth: 1200,\n  phone: 480,\n  reader: 550,\n  tablet: 768\n};\n\nfunction getSizeFromBreakpoint(breakpointValue, max = false) {\n  let mq;\n\n  if (breakpoints[breakpointValue]) {\n    mq = max ? breakpoints[breakpointValue] - 1 : breakpoints[breakpointValue]; // tslint:disable-next-line:radix\n  } else if (parseInt(breakpointValue)) {\n    mq = max ? breakpointValue - 1 : breakpointValue;\n  } else {\n    // tslint:disable-next-line:no-console\n    console.error('No valid breakpoint or size specified for media.');\n  }\n\n  return mq ? pixelate(mq) : '0';\n}\n\nexport function generateMedia() {\n  const max = breakpoint => (...args) => css([\"@media (max-width:\", \"){\", \";}\"], getSizeFromBreakpoint(breakpoint, true), css.call(null, ...args));\n\n  const min = breakpoint => (...args) => css([\"@media (min-width:\", \"){\", \";}\"], getSizeFromBreakpoint(breakpoint), css.call(null, ...args));\n\n  const between = (firstBreakpoint, secondBreakpoint) => (...args) => css([\"@media (min-width:\", \") and (max-width:\", \"){\", \";}\"], getSizeFromBreakpoint(firstBreakpoint), getSizeFromBreakpoint(secondBreakpoint, true), css.call(null, ...args));\n\n  return {\n    between,\n    max,\n    min\n  };\n}\nconst media = generateMedia();\nexport { media, breakpoints };","map":{"version":3,"sources":["/Users/italodr/Sites/runroom_ui_app/styles/media-queries.js"],"names":["css","pixelate","breakpoints","desktop","desktopLarge","maxWidth","phone","reader","tablet","getSizeFromBreakpoint","breakpointValue","max","mq","parseInt","console","error","generateMedia","breakpoint","args","call","min","between","firstBreakpoint","secondBreakpoint","media"],"mappings":"AAAA,SAASA,GAAT,QAAoB,mBAApB;AAEA,SAASC,QAAT,QAAyB,UAAzB;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,OAAO,EAAE,GADS;AAElBC,EAAAA,YAAY,EAAE,IAFI;AAGlBC,EAAAA,QAAQ,EAAE,IAHQ;AAIlBC,EAAAA,KAAK,EAAE,GAJW;AAKlBC,EAAAA,MAAM,EAAE,GALU;AAMlBC,EAAAA,MAAM,EAAE;AANU,CAApB;;AASA,SAASC,qBAAT,CAA+BC,eAA/B,EAAgDC,GAAG,GAAG,KAAtD,EAA6D;AAC3D,MAAIC,EAAJ;;AACA,MAAIV,WAAW,CAACQ,eAAD,CAAf,EAAkC;AAChCE,IAAAA,EAAE,GAAGD,GAAG,GAAGT,WAAW,CAACQ,eAAD,CAAX,GAA+B,CAAlC,GAAsCR,WAAW,CAACQ,eAAD,CAAzD,CADgC,CAEhC;AACD,GAHD,MAGO,IAAIG,QAAQ,CAACH,eAAD,CAAZ,EAA+B;AACpCE,IAAAA,EAAE,GAAGD,GAAG,GAAGD,eAAe,GAAG,CAArB,GAAyBA,eAAjC;AACD,GAFM,MAEA;AACL;AACAI,IAAAA,OAAO,CAACC,KAAR,CAAc,kDAAd;AACD;;AACD,SAAOH,EAAE,GAAGX,QAAQ,CAACW,EAAD,CAAX,GAAkB,GAA3B;AACD;;AAED,OAAO,SAASI,aAAT,GAAyB;AAC9B,QAAML,GAAG,GAAIM,UAAD,IAAgB,CAAC,GAAGC,IAAJ,KAAalB,GAAb,qCACLS,qBAAqB,CAACQ,UAAD,EAAa,IAAb,CADhB,EAEtBjB,GAAG,CAACmB,IAAJ,CAAS,IAAT,EAAe,GAAGD,IAAlB,CAFsB,CAA5B;;AAMA,QAAME,GAAG,GAAIH,UAAD,IAAgB,CAAC,GAAGC,IAAJ,KAAalB,GAAb,qCACLS,qBAAqB,CAACQ,UAAD,CADhB,EAEtBjB,GAAG,CAACmB,IAAJ,CAAS,IAAT,EAAe,GAAGD,IAAlB,CAFsB,CAA5B;;AAMA,QAAMG,OAAO,GAAG,CAACC,eAAD,EAAkBC,gBAAlB,KAAuC,CACrD,GAAGL,IADkD,KAElDlB,GAFkD,0DAGhCS,qBAAqB,CACtCa,eADsC,CAHW,EAK7Bb,qBAAqB,CAACc,gBAAD,EAAmB,IAAnB,CALQ,EAMjDvB,GAAG,CAACmB,IAAJ,CAAS,IAAT,EAAe,GAAGD,IAAlB,CANiD,CAAvD;;AAUA,SAAO;AACLG,IAAAA,OADK;AAELV,IAAAA,GAFK;AAGLS,IAAAA;AAHK,GAAP;AAKD;AAED,MAAMI,KAAK,GAAGR,aAAa,EAA3B;AAEA,SAASQ,KAAT,EAAgBtB,WAAhB","sourcesContent":["import { css } from 'styled-components';\n\nimport { pixelate } from './rhythm';\n\nconst breakpoints = {\n  desktop: 992,\n  desktopLarge: 1024,\n  maxWidth: 1200,\n  phone: 480,\n  reader: 550,\n  tablet: 768\n};\n\nfunction getSizeFromBreakpoint(breakpointValue, max = false) {\n  let mq;\n  if (breakpoints[breakpointValue]) {\n    mq = max ? breakpoints[breakpointValue] - 1 : breakpoints[breakpointValue];\n    // tslint:disable-next-line:radix\n  } else if (parseInt(breakpointValue)) {\n    mq = max ? breakpointValue - 1 : breakpointValue;\n  } else {\n    // tslint:disable-next-line:no-console\n    console.error('No valid breakpoint or size specified for media.');\n  }\n  return mq ? pixelate(mq) : '0';\n}\n\nexport function generateMedia() {\n  const max = (breakpoint) => (...args) => css`\n    @media (max-width: ${getSizeFromBreakpoint(breakpoint, true)}) {\n      ${css.call(null, ...args)};\n    }\n  `;\n\n  const min = (breakpoint) => (...args) => css`\n    @media (min-width: ${getSizeFromBreakpoint(breakpoint)}) {\n      ${css.call(null, ...args)};\n    }\n  `;\n\n  const between = (firstBreakpoint, secondBreakpoint) => (\n    ...args\n  ) => css`\n    @media (min-width: ${getSizeFromBreakpoint(\n        firstBreakpoint\n      )}) and (max-width: ${getSizeFromBreakpoint(secondBreakpoint, true)}) {\n      ${css.call(null, ...args)};\n    }\n  `;\n\n  return {\n    between,\n    max,\n    min\n  };\n}\n\nconst media = generateMedia();\n\nexport { media, breakpoints };\n"]},"metadata":{},"sourceType":"module"}