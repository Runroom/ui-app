{"ast":null,"code":"import { css } from 'styled-components';\nimport { pixelate } from './rhythm';\nvar breakpoints = {\n  desktop: 992,\n  desktopLarge: 1024,\n  maxWidth: 1200,\n  phone: 480,\n  reader: 550,\n  tablet: 768\n};\n\nfunction getSizeFromBreakpoint(breakpointValue) {\n  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var mq;\n\n  if (breakpoints[breakpointValue]) {\n    mq = max ? breakpoints[breakpointValue] - 1 : breakpoints[breakpointValue]; // tslint:disable-next-line:radix\n  } else if (parseInt(breakpointValue)) {\n    mq = max ? breakpointValue - 1 : breakpointValue;\n  } else {\n    // tslint:disable-next-line:no-console\n    console.error('No valid breakpoint or size specified for media.');\n  }\n\n  return mq ? pixelate(mq) : '0';\n}\n\nexport function generateMedia() {\n  var max = function max(breakpoint) {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return css([\"@media (max-width:\", \"){\", \";}\"], getSizeFromBreakpoint(breakpoint, true), css.call.apply(css, [null].concat(args)));\n    };\n  };\n\n  var min = function min(breakpoint) {\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return css([\"@media (min-width:\", \"){\", \";}\"], getSizeFromBreakpoint(breakpoint), css.call.apply(css, [null].concat(args)));\n    };\n  };\n\n  var between = function between(firstBreakpoint, secondBreakpoint) {\n    return function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return css([\"@media (min-width:\", \") and (max-width:\", \"){\", \";}\"], getSizeFromBreakpoint(firstBreakpoint), getSizeFromBreakpoint(secondBreakpoint, true), css.call.apply(css, [null].concat(args)));\n    };\n  };\n\n  return {\n    between: between,\n    max: max,\n    min: min\n  };\n}\nvar media = generateMedia();\nexport { media, breakpoints };","map":null,"metadata":{},"sourceType":"module"}