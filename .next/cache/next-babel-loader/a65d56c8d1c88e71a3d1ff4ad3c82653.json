{"ast":null,"code":"var _jsxFileName = \"/Users/Jose/Sites/runroom-ui-app/components/Iframe/index.js\";\nvar __jsx = React.createElement;\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { proxy } from '../../package.json';\nimport Iframe from './styles';\n\nconst Code = ({\n  component\n}) => {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const {\n    0: isError,\n    1: setIsError\n  } = useState(false);\n\n  const Loader = () => __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 24\n    }\n  }, \"Loading \", component, \".twig...\");\n\n  const Error = () => __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 23\n    }\n  }, \"Error \", component, \".twig!\");\n\n  useEffect(() => {\n    (async () => {\n      try {\n        await axios.get(`/.netlify/functions/server/components/${component}`);\n      } catch (err) {\n        console.error(err);\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, []);\n  return isLoading ? __jsx(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }) : isError ? __jsx(Error, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  }) : __jsx(Iframe, {\n    src: `${proxy[\"development\"]}/${component}.html`,\n    frameBorder: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  });\n};\n\nexport default Code;","map":{"version":3,"sources":["/Users/Jose/Sites/runroom-ui-app/components/Iframe/index.js"],"names":["axios","React","useEffect","useState","proxy","Iframe","Code","component","isLoading","setIsLoading","isError","setIsError","Loader","Error","get","err","console","error"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,SAASC,KAAT,QAAsB,oBAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAC9B,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BN,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAA,OAACO,OAAD;AAAA,OAAUC;AAAV,MAAwBR,QAAQ,CAAC,KAAD,CAAtC;;AACA,QAAMS,MAAM,GAAG,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAcL,SAAd,aAArB;;AACA,QAAMM,KAAK,GAAG,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAYN,SAAZ,WAApB;;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,UAAI;AACF,cAAMF,KAAK,CAACc,GAAN,CAAW,yCAAwCP,SAAU,EAA7D,CAAN;AACD,OAFD,CAEE,OAAOQ,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACAJ,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD,OALD,SAKU;AACRF,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KATD;AAUD,GAXQ,EAWN,EAXM,CAAT;AAaA,SAAOD,SAAS,GACd,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADc,GAEZE,OAAO,GAAG,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GACP,MAAC,MAAD;AAAQ,IAAA,GAAG,EAAG,GAAEN,KAAK,eAAuB,IAAGG,SAAU,OAAzD;AAAiE,IAAA,WAAW,EAAC,GAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ;AAKD,CAxBD;;AAyBA,eAAeD,IAAf","sourcesContent":["import axios from 'axios';\nimport React, { useEffect, useState } from 'react';\n\nimport { proxy } from '../../package.json';\nimport Iframe from './styles';\n\nconst Code = ({ component }) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const Loader = () => <div>Loading {component}.twig...</div>;\n  const Error = () => <div>Error {component}.twig!</div>;\n\n  useEffect(() => {\n    (async () => {\n      try {\n        await axios.get(`/.netlify/functions/server/components/${component}`);\n      } catch (err) {\n        console.error(err);\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, []);\n\n  return isLoading ? (\n    <Loader />\n  ) : isError ? <Error /> : (\n      <Iframe src={`${proxy[process.env.NODE_ENV]}/${component}.html`} frameBorder='0'></Iframe>\n    );\n};\nexport default Code;\n"]},"metadata":{},"sourceType":"module"}