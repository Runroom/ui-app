{"ast":null,"code":"import { theme } from '../config';\n/**\n * Modular Scale\n * Returns the modular scale size in rems\n * https://www.modularscale.com/?1&em&1.067\n *\n * @param {integer} n â€” Exponencial value\n */\n\nvar modular = function modular(n) {\n  return \"\".concat(Math.pow(theme.typography.fontRatio, n) || 1, \"rem\");\n};\n/**\n * Rems\n * Transforms pixels into rems based in the base-font-size set in the theme\n * file\n *\n * @param {integer|string} n â€” Number to transform\n */\n\n\nvar rems = function rems(n) {\n  return \"\".concat(parseInt(n, 10) / theme.typography.fontSize, \"rem\");\n};\n\nvar pixelate = function pixelate(n) {\n  return \"\".concat(n, \"px\");\n};\n/**\n * Space\n * Vertical and Horizontal Rhythm generator based on the base-line-height set in\n * the theme file\n *\n * @param {float} n â€” Multiplier, can accept decimal numbers\n */\n\n\nvar space = function space() {\n  var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  return \"\".concat(theme.typography.lineHeight * n, \"rem\");\n};\n\nexport { space, pixelate, rems, modular };","map":{"version":3,"sources":["/Users/italodr/Sites/runroom_ui_app/styles/rhythm.js"],"names":["theme","modular","n","Math","pow","typography","fontRatio","rems","parseInt","fontSize","pixelate","space","lineHeight"],"mappings":"AAAA,SAASA,KAAT,QAAsB,WAAtB;AAEA;;;;;;;;AAOA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAC,CAAC;AAAA,mBAAOC,IAAI,CAACC,GAAL,CAASJ,KAAK,CAACK,UAAN,CAAiBC,SAA1B,EAAqCJ,CAArC,KAA2C,CAAlD;AAAA,CAAjB;AAEA;;;;;;;;;AAOA,IAAMK,IAAI,GAAG,SAAPA,IAAO,CAAAL,CAAC;AAAA,mBAAOM,QAAQ,CAACN,CAAD,EAAI,EAAJ,CAAR,GAAkBF,KAAK,CAACK,UAAN,CAAiBI,QAA1C;AAAA,CAAd;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAR,CAAC;AAAA,mBAAOA,CAAP;AAAA,CAAlB;AAEA;;;;;;;;;AAOA,IAAMS,KAAK,GAAG,SAARA,KAAQ;AAAA,MAACT,CAAD,uEAAK,CAAL;AAAA,mBAAcF,KAAK,CAACK,UAAN,CAAiBO,UAAjB,GAA8BV,CAA5C;AAAA,CAAd;;AAEA,SAASS,KAAT,EAAgBD,QAAhB,EAA0BH,IAA1B,EAAgCN,OAAhC","sourcesContent":["import { theme } from '../config';\n\n/**\n * Modular Scale\n * Returns the modular scale size in rems\n * https://www.modularscale.com/?1&em&1.067\n *\n * @param {integer} n â€” Exponencial value\n */\nconst modular = n => `${Math.pow(theme.typography.fontRatio, n) || 1}rem`;\n\n/**\n * Rems\n * Transforms pixels into rems based in the base-font-size set in the theme\n * file\n *\n * @param {integer|string} n â€” Number to transform\n */\nconst rems = n => `${parseInt(n, 10) / theme.typography.fontSize}rem`;\n\nconst pixelate = n => `${n}px`;\n\n/**\n * Space\n * Vertical and Horizontal Rhythm generator based on the base-line-height set in\n * the theme file\n *\n * @param {float} n â€” Multiplier, can accept decimal numbers\n */\nconst space = (n = 1) => `${theme.typography.lineHeight * n}rem`;\n\nexport { space, pixelate, rems, modular };"]},"metadata":{},"sourceType":"module"}