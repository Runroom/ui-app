{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { css } from 'styled-components';\nimport { space } from './rhythm';\n\nvar hover = function hover() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return css([\"&:hover{html.non-touch &:hover{\", \";}}\"], css.call.apply(css, [null].concat(args)));\n};\n\nvar hexToRgb = function hexToRgb(hex) {\n  if (hex[0] === '#') {\n    hex = hex.substr(1);\n  }\n\n  if (hex.length === 3) {\n    var hr = hex[0];\n    var hg = hex[1];\n    var hb = hex[2];\n    return hexToRgb(\"\".concat(hr).concat(hr).concat(hg).concat(hg).concat(hb).concat(hb));\n  }\n\n  var _map$map = [0, 2, 4].map(function (offset) {\n    return hex.substring(offset, offset + 2);\n  }).map(function (hexCh) {\n    return parseInt(hexCh, 16);\n  }),\n      _map$map2 = _slicedToArray(_map$map, 3),\n      r = _map$map2[0],\n      g = _map$map2[1],\n      b = _map$map2[2];\n\n  return {\n    r: r,\n    g: g,\n    b: b\n  };\n};\n\nvar rgbToHex = function rgbToHex(r, g, b) {\n  return [r, g, b].map(function (decCh) {\n    return Math.max(0, Math.min(255, decCh)).toString(16);\n  }).map(function (hexCh) {\n    return hexCh.length === 1 ? \"0\".concat(hexCh) : hexCh;\n  }).join('');\n};\n\nvar getRatio = function getRatio(originalWidth, originalHeight) {\n  var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var finalHeight;\n  var finalWidth;\n\n  if (width > 0) {\n    finalHeight = Math.ceil(width / originalWidth * originalHeight) + 'px';\n    finalWidth = \"\".concat(width, \"px\");\n  } else {\n    finalHeight = \"\".concat(height, \"px\");\n    finalWidth = Math.ceil(height / originalHeight * originalWidth) + 'px';\n  }\n\n  return \"\\n    height: \".concat(finalHeight, \";\\n    width: \").concat(finalWidth, \";\\n  \");\n};\n\nvar columns = function columns(number) {\n  var spaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return \"\\n  width: calc((100% - \".concat(space(spaces * (number - 1)), \") / \").concat(number, \");\\n\\n  &:nth-child(n) { margin-right: \").concat(space(spaces), \"; }\\n  &:nth-child(\").concat(number, \"n) { margin-right: 0; }\\n\");\n};\n\nexport { columns, getRatio, hexToRgb, hover, rgbToHex };","map":null,"metadata":{},"sourceType":"module"}